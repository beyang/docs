// Source: https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html
export const vars: { [key: string]: string } = {
  CDPATH: `A colon-separated list of directories used as a search path for the <b class="command">cd</b> built-in command.`,

  HOME: `The current user's home directory; the default for the <b class="command">cd</b> built-in.  The value of this variable is also used by tilde expansion.`,
  IFS: `A list of characters that separate fields; used when the shell splits words as part of expansion.`,
  MAIL: `If this parameter is set to a file name and the <tt class="varname">MAILPATH</tt> variable is not set, Bash informs the user of the arrival of mail in the specified file.`,
  MAILPATH: `A colon-separated list of file names which the shell periodically checks for new mail.`,
  OPTARG: `The value of the last option argument processed by the <b class="command">getopts</b> built-in.`,
  OPTIND: `The index of the last option argument processed by the <b class="command">getopts</b> built-in.`,
  PATH: `A colon-separated list of directories in which the shell looks for commands.`,
  PS1: `The primary prompt string.  The default value is <span class="QUOTE">"'\s-\v\$ '"</span>.`,
  PS2: `The secondary prompt string.  The default value is <span class="QUOTE">"'&gt; '"</span>.`,

  auto_resume: `This variable controls how the shell interacts with the user and job control.`,
  BASH: `The full pathname used to execute the current instance of Bash.`,
  BASH_ENV: `If this variable is set when Bash is invoked to execute a shell script, its value is expanded and used as the name of a startup file to read before executing the script.`,
  BASH_VERSION: `The version number of the current instance of Bash.`,
  BASH_VERSINFO: `A read-only array variable whose members hold version information for this instance of Bash.`,
  COLUMNS: `Used by the <b class="command">select</b> built-in to determine the terminal width when printing selection lists.  Automatically set upon receipt of a <em>SIGWINCH</em> signal.`,
  COMP_CWORD: `An index into <tt class="varname">\${COMP_WORDS}</tt> of the word containing the current cursor position.`,
  COMP_LINE: `The current command line.`,
  COMP_POINT: `The index of the current cursor position relative to the beginning of the current command.`,
  COMP_WORDS: `An array variable consisting of the individual words in the current command line.`,
  COMPREPLY: `An array variable from which Bash reads the possible completions generated by a shell function invoked by the programmable completion facility.`,
  DIRSTACK: `An array variable containing the current contents of the directory stack.`,
  EUID: `The numeric effective user ID of the current user.`,
  FCEDIT: `The editor used as a default by the <tt class="option">-e</tt> option to the <b class="command">fc</b> built-in command.`,
  FIGNORE: `A colon-separated list of suffixes to ignore when performing file name completion.`,
  FUNCNAME: `The name of any currently-executing shell function.`,
  GLOBIGNORE: `A colon-separated list of patterns defining the set of file names to be ignored by file name expansion.`,
  GROUPS: `An array variable containing the list of groups of which the current user is a member.`,
  histchars: `Up to three characters which control history expansion, quick substitution, and <em>tokenization</em>.`,
  HISTCMD: `The history number, or index in the history list, of the current command.`,
  HISTCONTROL: `Defines whether a command is added to the history file.`,
  HISTFILE: `The name of the file to which the command history is saved.  The default value is <tt class="filename">~/.bash_history</tt>.`,
  HISTFILESIZE: `The maximum number of lines contained in the history file, defaults to 500.`,
  HISTIGNORE: `A colon-separated list of patterns used to decide which command lines should be saved in the history list.`,
  HISTSIZE: `The maximum number of commands to remember on the history list, default is 500.`,
  HOSTFILE: `Contains the name of a file in the same format as <tt class="filename">/etc/hosts</tt> that should be read when the shell needs to complete a hostname.`,
  HOSTNAME: `The name of the current host.`,
  HOSTTYPE: `A string describing the machine Bash is running on.`,
  IGNOREEOF: `Controls the action of the shell on receipt of an <em>EOF</em> character as the sole input.`,
  INPUTRC: `The name of the Readline initialization file, overriding the default <tt class="filename">/etc/inputrc</tt>.`,
  LANG: `Used to determine the locale category for any category not specifically selected with a variable starting with <tt class="varname">LC_</tt>.`,
  LC_ALL: `This variable overrides the value of <tt class="varname">LANG</tt> and any other <tt class="varname">LC_</tt> variable specifying a locale category.`,
  LC_COLLATE: `This variable determines the collation order used when sorting the results of file name expansion, and determines the behavior of range expressions, equivalence classes, and collating sequences within file name expansion and pattern matching.`,
  LC_CTYPE: `This variable determines the interpretation of characters and the behavior of character classes within file name expansion and pattern matching.`,
  LC_MESSAGES: `This variable determines the locale used to translate double-quoted strings preceded by a <span class="QUOTE">"$"</span> sign.`,
  LC_NUMERIC: `This variable determines the locale category used for number formatting.`,
  LINENO: `The line number in the script or shell function currently executing.`,
  LINES: `Used by the <b class="command">select</b> built-in to determine the column length for printing selection lists.`,
  MACHTYPE: `A string that fully describes the system type on which Bash is executing, in the standard GNU CPU-COMPANY-SYSTEM format.`,
  MAILCHECK: `How often (in seconds) that the shell should check for mail in the files specified in the <tt class="varname">MAILPATH</tt> or <tt class="varname">MAIL</tt> variables.`,
  OLDPWD: `The previous working directory as set by the <b class="command">cd</b> built-in.`,
  OPTERR: `If set to the value 1, Bash displays error messages generated by the <b class="command">getopts</b> built-in.`,
  OSTYPE: `A string describing the operating system Bash is running on.`,
  PIPESTATUS: `An array variable containing a list of exit status values from the processes in the most recently executed foreground pipeline (which may contain only a single command).`,
  POSIXLY_CORRECT: `If this variable is in the environment when <b class="command">bash</b> starts, the shell enters POSIX mode.`,
  PPID: `The process ID of the shell's parent process.`,
  PROMPT_COMMAND: `If set, the value is interpreted as a command to execute before the printing of each primary prompt (<tt class="varname">PS1</tt>).`,
  PS3: `The value of this variable is used as the prompt for the <b class="command">select</b> command.  Defaults to <span class="QUOTE">"'#? '"</span>`,
  PS4: `The value is the prompt printed before the command line is echoed when the <tt class="option">-x</tt> option is set; defaults to <span class="QUOTE">"'+ '"</span>.`,
  PWD: `The current working directory as set by the <b class="command">cd</b> built-in command.`,
  RANDOM: `Each time this parameter is referenced, a random integer between 0 and 32767 is generated.  Assigning a value to this variable seeds the random number generator.`,
  REPLY: `The default variable for the <b class="command">read</b> built-in.`,
  SECONDS: `This variable expands to the number of seconds since the shell was started.`,
  SHELLOPTS: `A colon-separated list of enabled shell options.`,
  SHLVL: `Incremented by one each time a new instance of Bash is started.`,
  TIMEFORMAT: `The value of this parameter is used as a format string specifying how the timing information for pipelines prefixed with the <b class="command">time</b> reserved word should be displayed.`,
  TMOUT: `If set to a value greater than zero, <tt class="varname">TMOUT</tt> is treated as the default timeout for the <b class="command">read</b> built-in.  In an interative shell, the value is interpreted as the number of seconds to wait for input after issuing the primary prompt when the shell is interactive. Bash terminates after that number of seconds if input does not arrive.`,
  UID: `The numeric, real user ID of the current user.`,

  "$*": `Expands to the positional parameters, starting from one.  When the expansion occurs within double quotes, it expands to a single word with the value of each parameter separated by the first character of the <tt class="varname">IFS</tt> special variable.`,
  "$@": `Expands to the positional parameters, starting from one.  When the expansion occurs within double quotes, each parameter expands to a separate word.`,
  "$#": `Expands to the number of positional parameters in decimal.`,
  "$?": `Expands to the exit status of the most recently executed foreground pipeline.`,
  "$-": `A hyphen expands to the current option flags as specified upon invocation, by the <b class="command">set</b> built-in command, or those set by the shell itself (such as the <tt class="option">-i</tt>).`,
  $$: `Expands to the process ID of the shell.`,
  "$!": `Expands to the process ID of the most recently executed background (asynchronous) command.`,
  $0: `Expands to the name of the shell or shell script.`,
  $_: `The underscore variable is set at shell startup and contains the absolute file name of the shell or script being executed as passed in the argument list.  Subsequently, it expands to the last argument to the previous command, after expansion.  It is also set to the full pathname of each command executed and placed in the environment exported to that command.  When checking mail, this parameter holds the name of the mail file.`,
};
