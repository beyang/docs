{"CDPATH":"A colon-separated list of directories used as a search path for the <b class=\"command\">cd</b> built-in command.","HOME":"The current user's home directory; the default for the <b class=\"command\">cd</b> built-in.  The value of this variable is also used by tilde expansion.","IFS":"A list of characters that separate fields; used when the shell splits words as part of expansion.","MAIL":"If this parameter is set to a file name and the <tt class=\"varname\">MAILPATH</tt> variable is not set, Bash informs the user of the arrival of mail in the specified file.","MAILPATH":"A colon-separated list of file names which the shell periodically checks for new mail.","OPTARG":"The value of the last option argument processed by the <b class=\"command\">getopts</b> built-in.","OPTIND":"The index of the last option argument processed by the <b class=\"command\">getopts</b> built-in.","PATH":"A colon-separated list of directories in which the shell looks for commands.","PS1":"The primary prompt string.  The default value is <span class=\"QUOTE\">\"'s-\u000b$ '\"</span>.","PS2":"The secondary prompt string.  The default value is <span class=\"QUOTE\">\"'&gt; '\"</span>.","auto_resume":"This variable controls how the shell interacts with the user and job control.","BASH":"The full pathname used to execute the current instance of Bash.","BASH_ENV":"If this variable is set when Bash is invoked to execute a shell\nscript, its value is expanded and used as the name of a startup file\nto read before executing the script.  See <a href=\"Bash-Startup-Files.html#Bash-Startup-Files\">Bash Startup Files</a>.","BASH_VERSION":"The version number of the current instance of Bash.","BASH_VERSINFO":"<p>A readonly array variable (see <a href=\"Arrays.html#Arrays\">Arrays</a>)\nwhose members hold version information for this instance of Bash.\nThe values assigned to the array members are as follows:\n</p>\n<dl compact=\"compact\">\n<dt><code>BASH_VERSINFO[0]</code></dt>\n<dd><p>The major version number (the <var>release</var>).\n</p>\n</dd>\n<dt><code>BASH_VERSINFO[1]</code></dt>\n<dd><p>The minor version number (the <var>version</var>).\n</p>\n</dd>\n<dt><code>BASH_VERSINFO[2]</code></dt>\n<dd><p>The patch level.\n</p>\n</dd>\n<dt><code>BASH_VERSINFO[3]</code></dt>\n<dd><p>The build version.\n</p>\n</dd>\n<dt><code>BASH_VERSINFO[4]</code></dt>\n<dd><p>The release status (e.g., <var>beta1</var>).\n</p>\n</dd>\n<dt><code>BASH_VERSINFO[5]</code></dt>\n<dd><p>The value of <code>MACHTYPE</code>.\n</p></dd>\n</dl>","COLUMNS":"Used by the <code>select</code> command to determine the terminal width\nwhen printing selection lists.\nAutomatically set if the <code>checkwinsize</code> option is enabled\n(see <a href=\"The-Shopt-Builtin.html#The-Shopt-Builtin\">The Shopt Builtin</a>), or in an interactive shell upon receipt of a\n<code>SIGWINCH</code>.","COMP_CWORD":"An index into <code>${COMP_WORDS}</code> of the word containing the current\ncursor position.\nThis variable is available only in shell functions invoked by the\nprogrammable completion facilities (see <a href=\"Programmable-Completion.html#Programmable-Completion\">Programmable Completion</a>).","COMP_LINE":"The current command line.\nThis variable is available only in shell functions and external\ncommands invoked by the\nprogrammable completion facilities (see <a href=\"Programmable-Completion.html#Programmable-Completion\">Programmable Completion</a>).","COMP_POINT":"The index of the current cursor position relative to the beginning of\nthe current command.\nIf the current cursor position is at the end of the current command,\nthe value of this variable is equal to <code>${#COMP_LINE}</code>.\nThis variable is available only in shell functions and external\ncommands invoked by the\nprogrammable completion facilities (see <a href=\"Programmable-Completion.html#Programmable-Completion\">Programmable Completion</a>).","COMP_WORDS":"An array variable consisting of the individual\nwords in the current command line.\nThe line is split into words as Readline would split it, using\n<code>COMP_WORDBREAKS</code> as described above.\nThis variable is available only in shell functions invoked by the\nprogrammable completion facilities (see <a href=\"Programmable-Completion.html#Programmable-Completion\">Programmable Completion</a>).","COMPREPLY":"An array variable from which Bash reads the possible completions\ngenerated by a shell function invoked by the programmable completion\nfacility (see <a href=\"Programmable-Completion.html#Programmable-Completion\">Programmable Completion</a>).\nEach array element contains one possible completion.","DIRSTACK":"An array variable containing the current contents of the directory stack.\nDirectories appear in the stack in the order they are displayed by the\n<code>dirs</code> builtin.\nAssigning to members of this array variable may be used to modify\ndirectories already in the stack, but the <code>pushd</code> and <code>popd</code>\nbuiltins must be used to add and remove directories.\nAssignment to this variable will not change the current directory.\nIf <code>DIRSTACK</code> is unset, it loses its special properties, even if\nit is subsequently reset.","EUID":"The numeric effective user id of the current user.  This variable\nis readonly.","FCEDIT":"The editor used as a default by the <samp>-e</samp> option to the <code>fc</code>\nbuiltin command.","FIGNORE":"A colon-separated list of suffixes to ignore when performing\nfilename completion.\nA filename whose suffix matches one of the entries in\n<code>FIGNORE</code>\nis excluded from the list of matched filenames.  A sample\nvalue is ‘<samp>.o:~</samp>’","FUNCNAME":"An array variable containing the names of all shell functions\ncurrently in the execution call stack.\nThe element with index 0 is the name of any currently-executing\nshell function.\nThe bottom-most element (the one with the highest index)\nis <code>\"main\"</code>.\nThis variable exists only when a shell function is executing.\nAssignments to <code>FUNCNAME</code> have no effect.\nIf <code>FUNCNAME</code> is unset, it loses its special properties, even if\nit is subsequently reset.\n</p>\n<p>This variable can be used with <code>BASH_LINENO</code> and <code>BASH_SOURCE</code>.\nEach element of <code>FUNCNAME</code> has corresponding elements in\n<code>BASH_LINENO</code> and <code>BASH_SOURCE</code> to describe the call stack.\nFor instance, <code>${FUNCNAME[$i]}</code> was called from the file\n<code>${BASH_SOURCE[$i+1]}</code> at line number <code>${BASH_LINENO[$i]}</code>.\nThe <code>caller</code> builtin displays the current call stack using this\ninformation.","GLOBIGNORE":"A colon-separated list of patterns defining the set of file names to\nbe ignored by filename expansion.\nIf a file name matched by a filename expansion pattern also matches one\nof the patterns in <code>GLOBIGNORE</code>, it is removed from the list\nof matches.\nThe pattern matching honors the setting of the <code>extglob</code> shell\noption.","GROUPS":"An array variable containing the list of groups of which the current\nuser is a member.\nAssignments to <code>GROUPS</code> have no effect.\nIf <code>GROUPS</code> is unset, it loses its special properties, even if it is\nsubsequently reset.","histchars":"Up to three characters which control history expansion, quick\nsubstitution, and tokenization (see <a href=\"History-Interaction.html#History-Interaction\">History Interaction</a>).\nThe first character is the\n<var>history expansion</var> character, that is, the character which signifies the\nstart of a history expansion, normally ‘<samp>!</samp>’.  The second character is the\ncharacter which signifies ‘quick substitution’ when seen as the first\ncharacter on a line, normally ‘<samp>^</samp>’.  The optional third character is the\ncharacter which indicates that the remainder of the line is a comment when\nfound as the first character of a word, usually ‘<samp>#</samp>’.  The history\ncomment character causes history substitution to be skipped for the\nremaining words on the line.  It does not necessarily cause the shell\nparser to treat the rest of the line as a comment.","HISTCMD":"The history number, or index in the history list, of the current\ncommand.  If <code>HISTCMD</code> is unset, it loses its special properties,\neven if it is subsequently reset.","HISTCONTROL":"A colon-separated list of values controlling how commands are saved on\nthe history list.\nIf the list of values includes ‘<samp>ignorespace</samp>’, lines which begin\nwith a space character are not saved in the history list.\nA value of ‘<samp>ignoredups</samp>’ causes lines which match the previous\nhistory entry to not be saved.\nA value of ‘<samp>ignoreboth</samp>’ is shorthand for\n‘<samp>ignorespace</samp>’ and ‘<samp>ignoredups</samp>’.\nA value of ‘<samp>erasedups</samp>’ causes all previous lines matching the\ncurrent line to be removed from the history list before that line\nis saved.\nAny value not in the above list is ignored.\nIf <code>HISTCONTROL</code> is unset, or does not include a valid value,\nall lines read by the shell parser are saved on the history list,\nsubject to the value of <code>HISTIGNORE</code>.\nThe second and subsequent lines of a multi-line compound command are\nnot tested, and are added to the history regardless of the value of\n<code>HISTCONTROL</code>.","HISTFILE":"The name of the file to which the command history is saved.  The\ndefault value is <samp>~/.bash_history</samp>.","HISTFILESIZE":"The maximum number of lines contained in the history file.\nWhen this variable is assigned a value, the history file is truncated,\nif necessary, to contain no more than that number of lines\nby removing the oldest entries.\nThe history file is also truncated to this size after\nwriting it when a shell exits.\nIf the value is 0, the history file is truncated to zero size.\nNon-numeric values and numeric values less than zero inhibit truncation.\nThe shell sets the default value to the value of <code>HISTSIZE</code>\nafter reading any startup files.","HISTIGNORE":"A colon-separated list of patterns used to decide which command\nlines should be saved on the history list.  Each pattern is\nanchored at the beginning of the line and must match the complete\nline (no implicit ‘<samp>*</samp>’ is appended).  Each pattern is tested\nagainst the line after the checks specified by <code>HISTCONTROL</code>\nare applied.  In addition to the normal shell pattern matching\ncharacters, ‘<samp>&amp;</samp>’ matches the previous history line.  ‘<samp>&amp;</samp>’\nmay be escaped using a backslash; the backslash is removed\nbefore attempting a match.\nThe second and subsequent lines of a multi-line compound command are\nnot tested, and are added to the history regardless of the value of\n<code>HISTIGNORE</code>.\nThe pattern matching honors the setting of the <code>extglob</code> shell\noption.\n</p>\n<p><code>HISTIGNORE</code> subsumes the function of <code>HISTCONTROL</code>.  A\npattern of ‘<samp>&amp;</samp>’ is identical to <code>ignoredups</code>, and a\npattern of ‘<samp>[ ]*</samp>’ is identical to <code>ignorespace</code>.\nCombining these two patterns, separating them with a colon,\nprovides the functionality of <code>ignoreboth</code>.","HISTSIZE":"The maximum number of commands to remember on the history list.\nIf the value is 0, commands are not saved in the history list.\nNumeric values less than zero result in every command being saved\non the history list (there is no limit).\nThe shell sets the default value to 500 after reading any startup files.","HOSTFILE":"Contains the name of a file in the same format as <samp>/etc/hosts</samp> that\nshould be read when the shell needs to complete a hostname.\nThe list of possible hostname completions may be changed while the shell\nis running;\nthe next time hostname completion is attempted after the\nvalue is changed, Bash adds the contents of the new file to the\nexisting list.\nIf <code>HOSTFILE</code> is set, but has no value, or does not name a readable file,\nBash attempts to read\n<samp>/etc/hosts</samp> to obtain the list of possible hostname completions.\nWhen <code>HOSTFILE</code> is unset, the hostname list is cleared.","HOSTNAME":"The name of the current host.","HOSTTYPE":"A string describing the machine Bash is running on.","IGNOREEOF":"Controls the action of the shell on receipt of an <code>EOF</code> character\nas the sole input.  If set, the value denotes the number\nof consecutive <code>EOF</code> characters that can be read as the\nfirst character on an input line\nbefore the shell will exit.  If the variable exists but does not\nhave a numeric value, or has no value, then the default is 10.\nIf the variable does not exist, then <code>EOF</code> signifies the end of\ninput to the shell.  This is only in effect for interactive shells.","INPUTRC":"The name of the Readline initialization file, overriding the default\nof <samp>~/.inputrc</samp>.","LANG":"Used to determine the locale category for any category not specifically\nselected with a variable starting with <code>LC_</code>.","LC_ALL":"This variable overrides the value of <code>LANG</code> and any other\n<code>LC_</code> variable specifying a locale category.","LC_COLLATE":"This variable determines the collation order used when sorting the\nresults of filename expansion, and\ndetermines the behavior of range expressions, equivalence classes,\nand collating sequences within filename expansion and pattern matching\n(see <a href=\"Filename-Expansion.html#Filename-Expansion\">Filename Expansion</a>).","LC_CTYPE":"This variable determines the interpretation of characters and the\nbehavior of character classes within filename expansion and pattern\nmatching (see <a href=\"Filename-Expansion.html#Filename-Expansion\">Filename Expansion</a>).","LC_MESSAGES":"This variable determines the locale used to translate double-quoted\nstrings preceded by a ‘<samp>$</samp>’ (see <a href=\"Locale-Translation.html#Locale-Translation\">Locale Translation</a>).","LC_NUMERIC":"This variable determines the locale category used for number formatting.","LINENO":"The line number in the script or shell function currently executing.","LINES":"Used by the <code>select</code> command to determine the column length\nfor printing selection lists.\nAutomatically set if the <code>checkwinsize</code> option is enabled\n(see <a href=\"The-Shopt-Builtin.html#The-Shopt-Builtin\">The Shopt Builtin</a>), or in an interactive shell upon receipt of a\n<code>SIGWINCH</code>.","MACHTYPE":"A string that fully describes the system type on which Bash\nis executing, in the standard <small>GNU</small> <var>cpu-company-system</var> format.","MAILCHECK":"How often (in seconds) that the shell should check for mail in the\nfiles specified in the <code>MAILPATH</code> or <code>MAIL</code> variables.\nThe default is 60 seconds.  When it is time to check\nfor mail, the shell does so before displaying the primary prompt.\nIf this variable is unset, or set to a value that is not a number\ngreater than or equal to zero, the shell disables mail checking.","OLDPWD":"The previous working directory as set by the <code>cd</code> builtin.","OPTERR":"If set to the value 1, Bash displays error messages\ngenerated by the <code>getopts</code> builtin command.","OSTYPE":"A string describing the operating system Bash is running on.","PIPESTATUS":"An array variable (see <a href=\"Arrays.html#Arrays\">Arrays</a>)\ncontaining a list of exit status values from the processes\nin the most-recently-executed foreground pipeline (which may\ncontain only a single command).","POSIXLY_CORRECT":"If this variable is in the environment when Bash starts, the shell\nenters <small>POSIX</small> mode (see <a href=\"Bash-POSIX-Mode.html#Bash-POSIX-Mode\">Bash POSIX Mode</a>) before reading the\nstartup files, as if the <samp>--posix</samp> invocation option had been supplied.\nIf it is set while the shell is running, Bash enables <small>POSIX</small> mode,\nas if the command\n</p><div class=\"example\">\n<pre class=\"example\"><code>set -o posix</code>\n</pre></div>\n<p>had been executed.\nWhen the shell enters <small>POSIX</small> mode, it sets this variable if it was\nnot already set.","PPID":"The process <small>ID</small> of the shell’s parent process.  This variable\nis readonly.","PROMPT_COMMAND":"If set, the value is interpreted as a command to execute\nbefore the printing of each primary prompt (<code>$PS1</code>).","PS3":"The value of this variable is used as the prompt for the\n<code>select</code> command.  If this variable is not set, the\n<code>select</code> command prompts with ‘<samp>#? </samp>’","PS4":"The value of this parameter is expanded like <var>PS1</var>\nand the expanded value is the prompt printed before the command line\nis echoed when the <samp>-x</samp> option is set (see <a href=\"The-Set-Builtin.html#The-Set-Builtin\">The Set Builtin</a>).\nThe first character of the expanded value is replicated multiple times,\nas necessary, to indicate multiple levels of indirection.\nThe default is ‘<samp>+ </samp>’.","PWD":"The current working directory as set by the <code>cd</code> builtin.","RANDOM":"Each time this parameter is referenced, a random integer\nbetween 0 and 32767 is generated.  Assigning a value to this\nvariable seeds the random number generator.","REPLY":"The default variable for the <code>read</code> builtin.","SECONDS":"This variable expands to the number of seconds since the\nshell was started.  Assignment to this variable resets\nthe count to the value assigned, and the expanded value\nbecomes the value assigned plus the number of seconds\nsince the assignment.","SHELLOPTS":"A colon-separated list of enabled shell options.  Each word in\nthe list is a valid argument for the <samp>-o</samp> option to the\n<code>set</code> builtin command (see <a href=\"The-Set-Builtin.html#The-Set-Builtin\">The Set Builtin</a>).\nThe options appearing in <code>SHELLOPTS</code> are those reported\nas ‘<samp>on</samp>’ by ‘<samp>set -o</samp>’.\nIf this variable is in the environment when Bash\nstarts up, each shell option in the list will be enabled before\nreading any startup files.  This variable is readonly.","SHLVL":"Incremented by one each time a new instance of Bash is started.  This is\nintended to be a count of how deeply your Bash shells are nested.","TIMEFORMAT":"<p>The value of this parameter is used as a format string specifying\nhow the timing information for pipelines prefixed with the <code>time</code>\nreserved word should be displayed.\nThe ‘<samp>%</samp>’ character introduces an\nescape sequence that is expanded to a time value or other\ninformation.\nThe escape sequences and their meanings are as\nfollows; the braces denote optional portions.\n</p>\n<dl compact=\"compact\">\n<dt><code>%%</code></dt>\n<dd><p>A literal ‘<samp>%</samp>’.\n</p>\n</dd>\n<dt><code>%[<var>p</var>][l]R</code></dt>\n<dd><p>The elapsed time in seconds.\n</p>\n</dd>\n<dt><code>%[<var>p</var>][l]U</code></dt>\n<dd><p>The number of CPU seconds spent in user mode.\n</p>\n</dd>\n<dt><code>%[<var>p</var>][l]S</code></dt>\n<dd><p>The number of CPU seconds spent in system mode.\n</p>\n</dd>\n<dt><code>%P</code></dt>\n<dd><p>The CPU percentage, computed as (%U + %S) / %R.\n</p></dd>\n</dl>\n\n<p>The optional <var>p</var> is a digit specifying the precision, the number of\nfractional digits after a decimal point.\nA value of 0 causes no decimal point or fraction to be output.\nAt most three places after the decimal point may be specified; values\nof <var>p</var> greater than 3 are changed to 3.\nIf <var>p</var> is not specified, the value 3 is used.\n</p>\n<p>The optional <code>l</code> specifies a longer format, including minutes, of\nthe form <var>MM</var>m<var>SS</var>.<var>FF</var>s.\nThe value of <var>p</var> determines whether or not the fraction is included.\n</p>\n<p>If this variable is not set, Bash acts as if it had the value\n</p><div class=\"example\">\n<pre class=\"example\"><code>$'\nreal\t%3lR\nuser\t%3lU\nsys\t%3lS'</code>\n</pre></div>\n<p>If the value is null, no timing information is displayed.\nA trailing newline is added when the format string is displayed.\n</p>\n</dd>","TMOUT":"If set to a value greater than zero, <code>TMOUT</code> is treated as the\ndefault timeout for the <code>read</code> builtin (see <a href=\"Bash-Builtins.html#Bash-Builtins\">Bash Builtins</a>).\nThe <code>select</code> command (see <a href=\"Conditional-Constructs.html#Conditional-Constructs\">Conditional Constructs</a>) terminates\nif input does not arrive after <code>TMOUT</code> seconds when input is coming\nfrom a terminal.\n</p>\n<p>In an interactive shell, the value is interpreted as\nthe number of seconds to wait for a line of input after issuing\nthe primary prompt.\nBash\nterminates after waiting for that number of seconds if a complete\nline of input does not arrive.","UID":"The numeric real user id of the current user.  This variable is readonly.","$*":"Expands to the positional parameters, starting from one.  When the expansion occurs within double quotes, it expands to a single word with the value of each parameter separated by the first character of the <tt class=\"varname\">IFS</tt> special variable.","$@":"Expands to the positional parameters, starting from one.  When the expansion occurs within double quotes, each parameter expands to a separate word.","$#":"Expands to the number of positional parameters in decimal.","$?":"Expands to the exit status of the most recently executed foreground pipeline.","$-":"A hyphen expands to the current option flags as specified upon invocation, by the <b class=\"command\">set</b> built-in command, or those set by the shell itself (such as the <tt class=\"option\">-i</tt>).","$$":"Expands to the process ID of the shell.","$!":"Expands to the process ID of the most recently executed background (asynchronous) command.","$0":"Expands to the name of the shell or shell script.","$_":"The underscore variable is set at shell startup and contains the absolute file name of the shell or script being executed as passed in the argument list.  Subsequently, it expands to the last argument to the previous command, after expansion.  It is also set to the full pathname of each command executed and placed in the environment exported to that command.  When checking mail, this parameter holds the name of the mail file.","BASHOPTS":"A colon-separated list of enabled shell options.  Each word in\nthe list is a valid argument for the <samp>-s</samp> option to the\n<code>shopt</code> builtin command (see <a href=\"The-Shopt-Builtin.html#The-Shopt-Builtin\">The Shopt Builtin</a>).\nThe options appearing in <code>BASHOPTS</code> are those reported\nas ‘<samp>on</samp>’ by ‘<samp>shopt</samp>’.\nIf this variable is in the environment when Bash\nstarts up, each shell option in the list will be enabled before\nreading any startup files.  This variable is readonly.","BASHPID":"Expands to the process ID of the current Bash process.\nThis differs from <code>$$</code> under certain circumstances, such as subshells\nthat do not require Bash to be re-initialized.\nAssignments to <code>BASHPID</code> have no effect.\nIf <code>BASHPID</code>\nis unset, it loses its special properties, even if it is\nsubsequently reset.","BASH_ALIASES":"An associative array variable whose members correspond to the internal\nlist of aliases as maintained by the <code>alias</code> builtin.\n(see <a href=\"Bourne-Shell-Builtins.html#Bourne-Shell-Builtins\">Bourne Shell Builtins</a>).\nElements added to this array appear in the alias list; however,\nunsetting array elements currently does not cause aliases to be removed\nfrom the alias list.\nIf <code>BASH_ALIASES</code>\nis unset, it loses its special properties, even if it is\nsubsequently reset.","BASH_ARGC":"An array variable whose values are the number of parameters in each\nframe of the current bash execution call stack.  The number of\nparameters to the current subroutine (shell function or script executed\nwith <code>.</code> or <code>source</code>) is at the top of the stack.  When a\nsubroutine is executed, the number of parameters passed is pushed onto\n<code>BASH_ARGC</code>.\nThe shell sets <code>BASH_ARGC</code> only when in extended debugging mode\n(see <a href=\"The-Shopt-Builtin.html#The-Shopt-Builtin\">The Shopt Builtin</a>\nfor a description of the <code>extdebug</code> option to the <code>shopt</code>\nbuiltin).\nSetting <code>extdebug</code> after the shell has started to execute a script,\nor referencing this variable when <code>extdebug</code> is not set,\nmay result in inconsistent values.","BASH_ARGV":"An array variable containing all of the parameters in the current bash\nexecution call stack.  The final parameter of the last subroutine call\nis at the top of the stack; the first parameter of the initial call is\nat the bottom.  When a subroutine is executed, the parameters supplied\nare pushed onto <code>BASH_ARGV</code>.\nThe shell sets <code>BASH_ARGV</code> only when in extended debugging mode\n(see <a href=\"The-Shopt-Builtin.html#The-Shopt-Builtin\">The Shopt Builtin</a>\nfor a description of the <code>extdebug</code> option to the <code>shopt</code>\nbuiltin).\nSetting <code>extdebug</code> after the shell has started to execute a script,\nor referencing this variable when <code>extdebug</code> is not set,\nmay result in inconsistent values.","BASH_ARGV0":"When referenced, this variable expands to the name of the shell or shell\nscript (identical to <code>$0</code>; See <a href=\"Special-Parameters.html#Special-Parameters\">Special Parameters</a>,\nfor the description of special parameter 0).\nAssignment to <code>BASH_ARGV0</code>\ncauses the value assigned to also be assigned to <code>$0</code>.\nIf <code>BASH_ARGV0</code>\nis unset, it loses its special properties, even if it is\nsubsequently reset.","BASH_CMDS":"An associative array variable whose members correspond to the internal\nhash table of commands as maintained by the <code>hash</code> builtin\n(see <a href=\"Bourne-Shell-Builtins.html#Bourne-Shell-Builtins\">Bourne Shell Builtins</a>).\nElements added to this array appear in the hash table; however,\nunsetting array elements currently does not cause command names to be removed\nfrom the hash table.\nIf <code>BASH_CMDS</code>\nis unset, it loses its special properties, even if it is\nsubsequently reset.","BASH_COMMAND":"The command currently being executed or about to be executed, unless the\nshell is executing a command as the result of a trap,\nin which case it is the command executing at the time of the trap.","BASH_COMPAT":"The value is used to set the shell’s compatibility level.\nSee <a href=\"The-Shopt-Builtin.html#The-Shopt-Builtin\">The Shopt Builtin</a>, for a description of the various compatibility\nlevels and their effects.\nThe value may be a decimal number (e.g., 4.2) or an integer (e.g., 42)\ncorresponding to the desired compatibility level.\nIf <code>BASH_COMPAT</code> is unset or set to the empty string, the compatibility\nlevel is set to the default for the current version.\nIf <code>BASH_COMPAT</code> is set to a value that is not one of the valid\ncompatibility levels, the shell prints an error message and sets the\ncompatibility level to the default for the current version.\nThe valid compatibility levels correspond to the compatibility options\naccepted by the <code>shopt</code> builtin described above (for example,\n<var>compat42</var> means that 4.2 and 42 are valid values).\nThe current version is also a valid value.","BASH_EXECUTION_STRING":"The command argument to the <samp>-c</samp> invocation option.","BASH_LINENO":"An array variable whose members are the line numbers in source files\nwhere each corresponding member of <var>FUNCNAME</var> was invoked.\n<code>${BASH_LINENO[$i]}</code> is the line number in the source file\n(<code>${BASH_SOURCE[$i+1]}</code>) where\n<code>${FUNCNAME[$i]}</code> was called (or <code>${BASH_LINENO[$i-1]}</code> if\nreferenced within another shell function).\nUse <code>LINENO</code> to obtain the current line number.","BASH_LOADABLES_PATH":"A colon-separated list of directories in which the shell looks for\ndynamically loadable builtins specified by the\n<code>enable</code> command.","BASH_REMATCH":"An array variable whose members are assigned by the ‘<samp>=~</samp>’ binary\noperator to the <code>[[</code> conditional command\n(see <a href=\"Conditional-Constructs.html#Conditional-Constructs\">Conditional Constructs</a>).\nThe element with index 0 is the portion of the string\nmatching the entire regular expression.\nThe element with index <var>n</var> is the portion of the\nstring matching the <var>n</var>th parenthesized subexpression.\nThis variable is read-only.","BASH_SOURCE":"An array variable whose members are the source filenames where the\ncorresponding shell function names in the <code>FUNCNAME</code> array\nvariable are defined.\nThe shell function <code>${FUNCNAME[$i]}</code> is defined in the file\n<code>${BASH_SOURCE[$i]}</code> and called from <code>${BASH_SOURCE[$i+1]}</code>","BASH_SUBSHELL":"Incremented by one within each subshell or subshell environment when\nthe shell begins executing in that environment.\nThe initial value is 0.","BASH_XTRACEFD":"If set to an integer corresponding to a valid file descriptor, Bash\nwill write the trace output generated when ‘<samp>set -x</samp>’\nis enabled to that file descriptor.\nThis allows tracing output to be separated from diagnostic and error\nmessages.\nThe file descriptor is closed when <code>BASH_XTRACEFD</code> is unset or assigned\na new value.\nUnsetting <code>BASH_XTRACEFD</code> or assigning it the empty string causes the\ntrace output to be sent to the standard error.\nNote that setting <code>BASH_XTRACEFD</code> to 2 (the standard error file\ndescriptor) and then unsetting it will result in the standard error\nbeing closed.","CHILD_MAX":"Set the number of exited child status values for the shell to remember.\nBash will not allow this value to be decreased below a <small>POSIX</small>-mandated\nminimum, and there is a maximum value (currently 8192) that this may\nnot exceed.\nThe minimum value is system-dependent.","COMP_TYPE":"Set to an integer value corresponding to the type of completion attempted\nthat caused a completion function to be called:\n<var>TAB</var>, for normal completion,\n‘<samp>?</samp>’, for listing completions after successive tabs,\n‘<samp>!</samp>’, for listing alternatives on partial word completion,\n‘<samp>@</samp>’, to list completions if the word is not unmodified,\nor\n‘<samp>%</samp>’, for menu completion.\nThis variable is available only in shell functions and external\ncommands invoked by the\nprogrammable completion facilities (see <a href=\"Programmable-Completion.html#Programmable-Completion\">Programmable Completion</a>).","COMP_KEY":"The key (or final key of a key sequence) used to invoke the current\ncompletion function.","COMP_WORDBREAKS":"The set of characters that the Readline library treats as word\nseparators when performing word completion.\nIf <code>COMP_WORDBREAKS</code> is unset, it loses its special properties,\neven if it is subsequently reset.","COPROC":"An array variable created to hold the file descriptors\nfor output from and input to an unnamed coprocess (see <a href=\"Coprocesses.html#Coprocesses\">Coprocesses</a>).","EMACS":"If Bash finds this variable in the environment when the shell\nstarts with value ‘<samp>t</samp>’, it assumes that the shell is running in an\nEmacs shell buffer and disables line editing.","ENV":"Similar to <code>BASH_ENV</code>; used when the shell is invoked in\n<small>POSIX</small> Mode (see <a href=\"Bash-POSIX-Mode.html#Bash-POSIX-Mode\">Bash POSIX Mode</a>).","EPOCHREALTIME":"Each time this parameter is referenced, it expands to the number of seconds\nsince the Unix Epoch as a floating point value with micro-second granularity\n(see the documentation for the C library function <var>time</var> for the\ndefinition of Epoch).\nAssignments to <code>EPOCHREALTIME</code> are ignored.\nIf <code>EPOCHREALTIME</code> is unset, it loses its special properties, even if\nit is subsequently reset.","EPOCHSECONDS":"Each time this parameter is referenced, it expands to the number of seconds\nsince the Unix Epoch (see the documentation for the C library function\n<var>time</var> for the definition of Epoch).\nAssignments to <code>EPOCHSECONDS</code> are ignored.\nIf <code>EPOCHSECONDS</code> is unset, it loses its special properties, even if\nit is subsequently reset.","EXECIGNORE":"A colon-separated list of shell patterns (see <a href=\"Pattern-Matching.html#Pattern-Matching\">Pattern Matching</a>)\ndefining the list of filenames to be ignored by command search using\n<code>PATH</code>.\nFiles whose full pathnames match one of these patterns are not considered\nexecutable files for the purposes of completion and command execution\nvia <code>PATH</code> lookup.\nThis does not affect the behavior of the <code>[</code>, <code>test</code>, and <code>[[</code>\ncommands.\nFull pathnames in the command hash table are not subject to <code>EXECIGNORE</code>.\nUse this variable to ignore shared library files that have the executable\nbit set, but are not executable files.\nThe pattern matching honors the setting of the <code>extglob</code> shell\noption.","FUNCNEST":"If set to a numeric value greater than 0, defines a maximum function\nnesting level.  Function invocations that exceed this nesting level\nwill cause the current command to abort.","HISTTIMEFORMAT":"If this variable is set and not null, its value is used as a format string\nfor <var>strftime</var> to print the time stamp associated with each history\nentry displayed by the <code>history</code> builtin.\nIf this variable is set, time stamps are written to the history file so\nthey may be preserved across shell sessions.\nThis uses the history comment character to distinguish timestamps from\nother history lines.","INSIDE_EMACS":"If Bash finds this variable in the environment when the shell\nstarts, it assumes that the shell is running in an Emacs shell buffer\nand may disable line editing depending on the value of <code>TERM</code>.","LC_TIME":"This variable determines the locale category used for data and time\nformatting.","MAPFILE":"An array variable created to hold the text read by the\n<code>mapfile</code> builtin when no variable name is supplied.","PROMPT_DIRTRIM":"If set to a number greater than zero, the value is used as the number of\ntrailing directory components to retain when expanding the <code>w</code> and\n<code>W</code> prompt string escapes (see <a href=\"Controlling-the-Prompt.html#Controlling-the-Prompt\">Controlling the Prompt</a>).\nCharacters removed are replaced with an ellipsis.","PS0":"The value of this parameter is expanded like <var>PS1</var>\nand displayed by interactive shells after reading a command\nand before the command is executed.","READLINE_LINE":"The contents of the Readline line buffer, for use\nwith ‘<samp>bind -x</samp>’ (see <a href=\"Bash-Builtins.html#Bash-Builtins\">Bash Builtins</a>).","READLINE_POINT":"The position of the insertion point in the Readline line buffer, for use\nwith ‘<samp>bind -x</samp>’ (see <a href=\"Bash-Builtins.html#Bash-Builtins\">Bash Builtins</a>).","SHELL":"The full pathname to the shell is kept in this environment variable.\nIf it is not set when the shell starts,\nBash assigns to it the full pathname of the current user’s login shell.","TMPDIR":"If set, Bash uses its value as the name of a directory in which\nBash creates temporary files for the shell’s use."}